Rails bringt die Voraussetzungen für eine Authentifiizierung mit.
1. Aktivieren Sie in der Datei 'Gemfile' das Gem gem 'bcrypt', indem Sie das Kommentarzeichen entfernen.


Anlegen eines Users

2. Im Model das für die Authentifizierung verwendet wird, in unserem Beispiel User, ist die Angabe 
	class User < ActiveRecord::Base
		has_secure_password
nötig.
Damit stehen in diesem model verschiedene Methoden zur Verschlüsselung und zur Authentifizierung zur Verfügung.

3. Ein zerntrales Attribut in dem model ist 'password'
Das kann beim anlegen berücksichtigt werden:
	rails g model user email password:digest
In jedem fall muss in der Migration für das Feld attribut die Zeile stehen: t.string :password_digest
Dieser Eintrag sorgt dafür, dass in kombination mit 'has_secure_pasword' der Passworteintrag in der Tabelle verschlüsselt wird.

4. Das Formular zum Anlegen eines Users enthält zwei Textfelder für das Passwort: 
  <%= f.password_field :password %>
  <%= f.password_field :password_confirmation %>

Authentifizierung:
Neben dem model für die Accounts ist wird ein Controller 'Sessions' angelegt, in dem die Authentifizierung stattfindet.
 rails g controller session new
Der Controller hat eine Action für das Login-Formular (new-Action), eine create-Acion für das Überprüfen der Logindaten und eine destroy-Action für das Ausloggen.
Für die Authentifizierung wird eine Methode von bcrypt verwendet.
Wir haben eine eigene Klassenmethode von User mit dem Namen authenticate geschrieben, die wir im Controller aufrufen.
	def self.authenticate(email, password)
		user = User.find_by(:email => email)
		user && user.authenticate(password)
	end

Bei einem Fehlschlagen der Authentifizierung wird in das Login-Formular zurückgeleitet.
Bei einem erfolgreichen authentifizieren wird eine Session-Variable angelegt.
	session[:user_id] = user.id

Diese Sessionvariable wird bei jedem Aufruf im application_controler überprüft:
	def current_user
		@current_user = User.find(session[:user_id]) if session[:user_id]
	end
	helper_method :current_user

Beim Logout eines Users wird diese Session zerstört:
	def destroy
		session[:user_id] = nil
	end

Überprüfung der authentifizierung im controller
Um den zugriff eines User zu beschränken kann im Controller eines abfrage durchgeführt werden, ob der User eingeloggt ist.
	def require_signin
		unless current_user
			redirect_to signin_url, alert: "Erst Einloggen, dann wohlfühlen."
		end
	end

Wenn die Variable (Helper) current_user nicht gefüllt ist, ann bedeutet das, dass der User angemeldet ist. Er wird dann zum Loginfenster umgeleitet.

Beispiel:
Damit nur ein eingeloggter User andere User sehen kann, aber dennoch das anlegen eines neuen Users mögliche ist, steht in dem users_controller:
	before_action :require_signin, except: [:new, :create]
before_action: vor jeder weiteren Aktivität wird diese Methode ausgeführt.
:require_signin => die von uns im application_controller definierte Methode wird ausgeführt
except: [:new, :create] => Die Actions zum Anlegen eines neuen Users new und create werden ausgenommen

In der routes.rb stehen die einzelnen Pfade:
get 'signup' => "users#new"
get 'signin' => "sessions#new"
get'logout' => "sessions#destroy"

resources :sessions
resources :users